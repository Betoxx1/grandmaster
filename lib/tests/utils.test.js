/* eslint-disable */
const utils = require('../utils')
const Series = require('../Series')

const x = new Series(
    0.8517556023026154, 0.4490693735258726, 0.9872267604921230, 0.0401175466189283, 0.1256995966931448, 0.3847130530750613,
    0.9351250036877014, 0.2024027284862434, 0.5938752280475099, 0.9568260591840370, 0.1352194420635203, 0.4121425799737654,
    0.9621498379401939, 0.1186297675147551, 0.3641187339924956, 0.9102604751917173, 0.2782051977212271, 0.7669068741805512,
    0.6685696134144385, 0.8630208040549163, 0.4171733155627294, 0.9663365607978608, 0.1055597839323158, 0.3255807145434168,
    0.8535919748412616, 0.4439072252420490, 0.9845132804030074, 0.0486337722915399, 0.1521937494326577, 0.4601203679396524,
    0.9921620247701907, 0.0246212371346664, 0.0772727899492741, 0.2403822505716120, 0.6854220127537110, 0.8350787368704385,
    0.4952437893032002, 0.9998883692506449, 0.0003506983348999, 0.0011017510896532, 0.0034612462182169, 0.0108736114056698,
    0.0341538142480741, 0.1070916095394846, 0.3301270933140146, 0.8609452061143263, 0.4230905772991264, 0.9709520822184817
)

const y = new Series(
    0.9657037680596756, 0.1075364441487714, 0.3314459115175327, 0.8630454416119831, 0.4171029700454831, 0.9662796788222355,
    0.1057374838383601, 0.3261085072473514, 0.8544545802928034, 0.4414772814327783, 0.9831463086386367, 0.0529226973580733,
    0.1654966231607237, 0.4968132930450393, 0.9999498870027263, 0.0001574346234341, 0.0004945954362363, 0.0015538167637363,
    0.0048814399435745, 0.0153348947789819, 0.0481573594557267, 0.1507143199383910, 0.4559888646790245, 0.9904566048221072,
    0.0299769687208065, 0.0940362792883171, 0.2911452059504616, 0.7923549927379712, 0.6070444279178350, 0.9439854155675452,
    0.1750681699007431, 0.5226811559057535, 0.9974624397817707, 0.0079718961000520, 0.0250418322231359, 0.0785901097314155,
    0.2443973154325775, 0.6945518572812023, 0.8189584457889211, 0.5385866799137743, 0.9926614091734709, 0.0230528207033572,
    0.0723592790191380, 0.2253705744536406, 1.6503328680647196, 2.9905312829400976, 0.8719844337485782, 0.3371670489690378
)

const one = new Series(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 9, 10, 20)
const two = new Series(10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 9, 8, 7, 12)

test('crossunder', () => {
    expect(utils.crossunder(x, 0.6)).toEqual(false)
    expect(utils.crossunder(y, 0.6)).toEqual(true)
})

test('crossover', () => {
    expect(utils.crossover(x, 0.6)).toEqual(true)
    expect(utils.crossover(y, 0.6)).toEqual(false)
})

test('crossunderSeries', () => {
    expect(utils.crossunderSeries(x, y)).toEqual(false)
    expect(utils.crossunderSeries(y, x)).toEqual(true)
})

test('crossoverSeries', () => {
    expect(utils.crossoverSeries(x, y)).toEqual(true)
    expect(utils.crossoverSeries(y, x)).toEqual(false)
})

test('persistentCrossunder', () => {
    expect(utils.persistentCrossunder(two, one, 3)).toEqual(true)
    expect(utils.persistentCrossunder(one, two, 3)).toEqual(false)
})

test('persistentCrossover', () => {
    expect(utils.persistentCrossover(one, two, 3)).toEqual(true)
    expect(utils.persistentCrossover(two, one, 3)).toEqual(false)
})

test('hasPeaked', () => {
    expect(utils.hasPeaked(y, 2)).toEqual(true)
    expect(utils.hasPeaked(x, 6)).toEqual(false)
})

test('hasBottomed', () => {
    expect(utils.hasBottomed(one, 3)).toEqual(true)
    expect(utils.hasBottomed(two, 1)).toEqual(true)
})
